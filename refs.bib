% Encoding: UTF-8

@Misc{StatCounter2021,
  author       = {StatCounter},
  howpublished = {Online (URL: https://gs.statcounter.com/os-market-share/mobile-tablet-console/worldwide/\#monthly-201208-202104)},
  month        = may,
  note         = {Accessed 18.05.2021},
  title        = {{Mobile, Tablet \& Console Operating System Market Share Worldwide}},
  year         = {2021},
}

@Misc{McAfee2020,
  author       = {McAfee},
  howpublished = {Online (URL: https://www.mcafee.com/enterprise/en-us/assets/reports/rp-mobile-threat-report-2019.pdf)},
  note         = {Accessed: 29.07.2020},
  title        = {{McAfee Mobile Threat Report 2019}},
  year         = {2020},
}

@Misc{Securelist2020,
  author       = {Kaspersky Securelist},
  howpublished = {Online (URL: https://securelist.com/mobile-malware-evolution-2019/96280/)},
  note         = {Accessed: 29.07.2020},
  title        = {{Mobile Malware Evolution 2019}},
  year         = {2020},
}

@InProceedings{Qiu2019,
  author    = {Qiu, Junyang and Nepal and Surya and Luo, Wei and Pan and Lei and Tai, Yonghang and Zhang, Jun and Xiang, Yang and Chen, Xiaofeng and Huang, Xinyi and Zhang, Jun},
  booktitle = {Machine Learning for Cyber Security},
  title     = {{Data-Driven Android Malware Intelligence: A Survey}},
  year      = {2019},
  pages     = {183--202},
  publisher = {Springer International Publishing},
}

@InProceedings{Wong2018,
  author    = {Michelle Y. Wong and David Lie},
  booktitle = {27th {USENIX} Security Symposium ({USENIX} Security 18)},
  title     = {{Tackling runtime-based obfuscation in Android with {TIRO}}},
  year      = {2018},
  address   = {Baltimore, MD},
  month     = aug,
  pages     = {1247--1262},
  publisher = {{USENIX} Association},
  isbn      = {978-1-939133-04-5},
  url       = {https://www.usenix.org/conference/usenixsecurity18/presentation/wong},
}

@InProceedings{Kim2018,
  author    = {H. M. {Kim} and H. M. {Song} and J. W. {Seo} and H. K. {Kim}},
  booktitle = {2018 16th Annual Conference on Privacy, Security and Trust (PST)},
  title     = {{Andro-Simnet: Android Malware Family Classification using Social Network Analysis}},
  year      = {2018},
  month     = {Aug},
  pages     = {1-8},
  doi       = {10.1109/PST.2018.8514216},
  groups    = {Manifest},
  issn      = {null},
  keywords  = {Android (operating system);invasive software;mobile computing;pattern classification;social networking (online);metamorphic malware;behavior-based detection;efficient malware classification;malware family network aggregation;malware dataset;signature-based malware detection method;polymorphic malware;Android malware family classification;Andro-Simnet;social network analysis;mobile devices;malwares attack behavior pattern;tactical characteristics;high classification accuracy;graph visualization;k-fold cross-validation;Malware;Feature extraction;Classification algorithms;Detection algorithms;Social network services;Static analysis;Generators;malware similarity;machine learning;malware classification;social network analysis},
}

@Article{Taheri2020,
  author   = {Rahim Taheri and Meysam Ghahramani and Reza Javidan and Mohammad Shojafar and Zahra Pooranian and Mauro Conti},
  journal  = {Future Generation Computer Systems},
  title    = {{Similarity-based Android malware detection using Hamming distance of static binary features}},
  year     = {2020},
  issn     = {0167-739X},
  pages    = {230 - 247},
  volume   = {105},
  doi      = {https://doi.org/10.1016/j.future.2019.11.034},
  groups   = {Manifest},
  keywords = {Android, Malware detection, Clustering, K-nearest neighbor (KNN), Static analysis, Hamming distance},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167739X19315122},
}

@Article{Alazab2020,
  author   = {Moutaz Alazab and Mamoun Alazab and Andrii Shalaginov and Abdelwadood Mesleh and Albara Awajan},
  journal  = {Future Generation Computer Systems},
  title    = {{Intelligent mobile malware detection using permission requests and API calls}},
  year     = {2020},
  issn     = {0167-739X},
  pages    = {509 - 521},
  volume   = {107},
  doi      = {https://doi.org/10.1016/j.future.2020.02.002},
  groups   = {Manifest},
  keywords = {Mobile malware, Malware detection, Mobile security, IoT, API calls, Android permissions},
  url      = {http://www.sciencedirect.com/science/article/pii/S0167739X19321223},
}

@InProceedings{Ge2019,
  author    = {X. {Ge} and Y. {Pan} and Y. {Fan} and C. {Fang}},
  booktitle = {2019 IEEE 19th International Conference on Software Quality, Reliability and Security Companion (QRS-C)},
  title     = {{AMDroid: Android Malware Detection Using Function Call Graphs}},
  year      = {2019},
  month     = {July},
  pages     = {71-77},
  doi       = {10.1109/QRS-C.2019.00027},
  groups    = {FCG},
  issn      = {null},
  keywords  = {Android (operating system);application program interfaces;graph theory;invasive software;learning (artificial intelligence);AMDroid;Android malware detection;function call graphs;mobile Internet;countless malicious applications;opcode sequences;FCGs;graph kernels;mobile operating system;API calls;structural semantic learning;Malware;Feature extraction;Kernel;Semantics;Smart phones;Machine learning;Static analysis;Android Malware Detection;Static Analysis;Function Call Graph;Graph Kernels},
}

@InProceedings{Dam2017,
  author    = {Dam, Khanh-Huu-The and Touili, Tayssir},
  booktitle = {Proceedings of the 12th International Conference on Availability, Reliability and Security},
  title     = {{Learning Android Malware}},
  year      = {2017},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  series    = {ARES â€™17},
  articleno = {Article 59},
  doi       = {10.1145/3098954.3105826},
  groups    = {ACG},
  isbn      = {9781450352574},
  keywords  = {static analysis, Android malware, API call graphs, learning graphs},
  location  = {Reggio Calabria, Italy},
  numpages  = {9},
  url       = {https://doi.org/10.1145/3098954.3105826},
}

@Unpublished{Vinayaka2021,
  author = {Vinayaka, K. V. and Jaidhar, C. D.},
  note   = {Accepted for Second Internal Conference on Secure Cyber Computing and Communications to be held at Jalandhar, Punjab, India},
  title  = {{Android Malware Detection based on Function Call Graph using Graph Convolutional Networks}},
  year   = {2021},
}

@InProceedings{Cao2015,
  author       = {Yinzhi Cao and Yanick Fratantonio and Antonio Bianchi and Manuel Egele and Christopher Kruegel and Giovanni Vigna and Yan Chen},
  booktitle    = {22nd Annual Network and Distributed System Security Symposium, {NDSS} 2015, San Diego, California, USA, February 8-11, 2015},
  title        = {{EdgeMiner: Automatically Detecting Implicit Control Flow Transitions through the Android Framework}},
  year         = {2015},
  publisher    = {The Internet Society},
  bibsource    = {dblp computer science bibliography, https://dblp.org},
  biburl       = {https://dblp.org/rec/conf/ndss/CaoFBEKVC15.bib},
  creationdate = {2021-05-19T09:07:47},
  url          = {https://www.ndss-symposium.org/ndss2015/edgeminer-automatically-detecting-implicit-control-flow-transitions-through-android-framework},
}

@InProceedings{DominguezPerez2017,
  author    = {Dominguez Perez, Danilo and Le, Wei},
  booktitle = {2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C)},
  title     = {{Predicate Callback Summaries}},
  year      = {2017},
  pages     = {291-293},
  doi       = {10.1109/ICSE-C.2017.95},
}

@Article{Chen2020,
  author   = {X. {Chen} and C. {Li} and D. {Wang} and S. {Wen} and J. {Zhang} and S. {Nepal} and Y. {Xiang} and K. {Ren}},
  journal  = {IEEE Transactions on Information Forensics and Security},
  title    = {{Android {HIV}: A Study of Repackaging Malware for Evading Machine-Learning Detection}},
  year     = {2020},
  issn     = {1556-6021},
  pages    = {987-1001},
  volume   = {15},
  doi      = {10.1109/TIFS.2019.2932228},
  keywords = {Android (operating system);application program interfaces;feature extraction;image classification;invasive software;learning (artificial intelligence);mobile computing;neural nets;software packages;semantic features;Android HIV;repackaging malware;machine-learning detection;adversarial examples;attacking method;Android APK;Android malware detectors;Dalvik bytecode;control-flow-graph;MaMaDroid;Drebin;image classification;application program interfaces;Malware;Feature extraction;Detectors;Machine learning;Perturbation methods;Semantics;Tools;Android malware detection;adversarial machine learning},
}

@Article{Liu2018,
  author   = {Liu, Yu and Zhang, Liqiang and Huang, Xiangdong},
  journal  = {Wireless Personal Communications},
  title    = {{Using {G} Features to Improve the Efficiency of Function Call Graph Based Android Malware Detection}},
  year     = {2018},
  issn     = {1572-834X},
  number   = {4},
  pages    = {2947-2955},
  volume   = {103},
  abstract = {In this paper, we proposed a G features based Android malware detecting scheme with information of Function Call Graph. The experimental results showed that our G features based detecting scheme obtained a high detecting performance in up-to-date malware testing dataset. Besides, the collapsing issue induced by the high-dimension vectors of traditional Function Call Graph detection can also be avoided with our methods.},
  doi      = {10.1007/s11277-018-5982-0},
  url      = {https://doi.org/10.1007/s11277-018-5982-0},
}

@Article{Onwuzurike2019,
  author     = {Onwuzurike, Lucky and Mariconti, Enrico and Andriotis, Panagiotis and Cristofaro, Emiliano De and Ross, Gordon and Stringhini, Gianluca},
  journal    = {ACM Trans. Priv. Secur.},
  title      = {{MaMaDroid: Detecting Android Malware by Building Markov Chains of Behavioral Models (Extended Version)}},
  year       = {2019},
  issn       = {2471-2566},
  month      = apr,
  number     = {2},
  volume     = {22},
  address    = {New York, NY, USA},
  articleno  = {Article 14},
  doi        = {10.1145/3313391},
  groups     = {Datasets},
  issue_date = {April 2019},
  keywords   = {static analysis, malware detection, Android},
  numpages   = {34},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3313391},
}

@InProceedings{Kipf2017,
  author    = {Kipf, Thomas N. and Welling, Max},
  booktitle = {International Conference on Learning Representations (ICLR)},
  title     = {{Semi-Supervised Classification with Graph Convolutional Networks}},
  year      = {2017},
  groups    = {GCN Algorithms},
}

@InProceedings{Zhang2018,
  author    = {Zhang, Si and Tong, Hanghang and Xu, Jiejun and Maciejewski, Ross},
  booktitle = {Computational Data and Social Networks},
  title     = {{Graph Convolutional Networks: Algorithms, Applications and Open Challenges}},
  year      = {2018},
  address   = {Cham},
  editor    = {Chen, Xuemin and Sen, Arunabha and Li, Wei Wayne and Thai, My T.},
  pages     = {79--91},
  publisher = {Springer International Publishing},
  isbn      = {978-3-030-04648-4},
}

@Article{Cai2021,
  author   = {Minghui Cai and Yuan Jiang and Cuiying Gao and Heng Li and Wei Yuan},
  journal  = {Neurocomputing},
  title    = {{Learning features from enhanced function call graphs for Android malware detection}},
  year     = {2021},
  issn     = {0925-2312},
  pages    = {301-307},
  volume   = {423},
  doi      = {https://doi.org/10.1016/j.neucom.2020.10.054},
  groups   = {FCG},
  keywords = {Graph convolutional network, Android malware detection, Function embedding, Function call graph},
  url      = {https://www.sciencedirect.com/science/article/pii/S0925231220316295},
}

@Article{Yang2021,
  author         = {Yang, Yang and Du, Xuehui and Yang, Zhi and Liu, Xing},
  journal        = {Electronics},
  title          = {{Android Malware Detection Based on Structural Features of the Function Call Graph}},
  year           = {2021},
  issn           = {2079-9292},
  number         = {2},
  volume         = {10},
  article-number = {186},
  doi            = {10.3390/electronics10020186},
  groups         = {FCG},
  url            = {https://www.mdpi.com/2079-9292/10/2/186},
}

@InProceedings{Backes2016,
  author    = {Michael Backes and Sven Bugiel and Erik Derr and Patrick McDaniel and Damien Octeau and Sebastian Weisgerber},
  booktitle = {25th {USENIX} Security Symposium ({USENIX} Security 16)},
  title     = {{On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis}},
  year      = {2016},
  address   = {Austin, TX},
  month     = aug,
  pages     = {1101--1118},
  publisher = {{USENIX} Association},
  isbn      = {978-1-931971-32-4},
  url       = {https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/backes_android},
}

@Book{Levin2021,
  author  = {Oscar Levin},
  title   = {Discrete mathematics: An open introduction},
  year    = {2021},
  edition = {Third},
  isbn    = {978-1792901690},
}

@InProceedings{Zhang2019,
  author    = {Zhang, Chuxu and Song, Dongjin and Huang, Chao and Swami, Ananthram and Chawla, Nitesh V.},
  booktitle = {Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining},
  title     = {{Heterogeneous Graph Neural Network}},
  year      = {2019},
  address   = {New York, NY, USA},
  pages     = {793â€“803},
  publisher = {Association for Computing Machinery},
  series    = {KDD '19},
  abstract  = {Representation learning in heterogeneous graphs aims to pursue a meaningful vector representation for each node so as to facilitate downstream applications such as link prediction, personalized recommendation, node classification, etc. This task, however, is challenging not only because of the demand to incorporate heterogeneous structural (graph) information consisting of multiple types of nodes and edges, but also due to the need for considering heterogeneous attributes or contents (e.g., text or image) associated with each node. Despite a substantial amount of effort has been made to homogeneous (or heterogeneous) graph embedding, attributed graph embedding as well as graph neural networks, few of them can jointly consider heterogeneous structural (graph) information as well as heterogeneous contents information of each node effectively. In this paper, we propose HetGNN, a heterogeneous graph neural network model, to resolve this issue. Specifically, we first introduce a random walk with restart strategy to sample a fixed size of strongly correlated heterogeneous neighbors for each node and group them based upon node types. Next, we design a neural network architecture with two modules to aggregate feature information of those sampled neighboring nodes. The first module encodes "deep" feature interactions of heterogeneous contents and generates content embedding for each node. The second module aggregates content (attribute) embeddings of different neighboring groups (types) and further combines them by considering the impacts of different groups to obtain the ultimate node embedding. Finally, we leverage a graph context loss and a mini-batch gradient descent procedure to train the model in an end-to-end manner. Extensive experiments on several datasets demonstrate that HetGNN can outperform state-of-the-art baselines in various graph mining tasks, i.e., link prediction, recommendation, node classification & clustering and inductive node classification & clustering.},
  doi       = {10.1145/3292500.3330961},
  isbn      = {9781450362016},
  keywords  = {heterogeneous graphs, graph embedding, graph neural networks},
  location  = {Anchorage, AK, USA},
  numpages  = {11},
  url       = {https://doi.org/10.1145/3292500.3330961},
}

@Misc{Source2021,
  author       = {Android Source},
  howpublished = {Online (URL: https://source.android.com/devices/tech/dalvik/dex-format)},
  note         = {Accessed 18.05.2021},
  title        = {{Dalvik Executable format}},
  year         = {2021},
}

@Misc{ADT2021,
  author       = {{Androguard Development Team}},
  howpublished = {Online (URL: https://github.com/androguard/androguard)},
  note         = {Accessed (18.05.2020)},
  title        = {Androguard},
  year         = {2021},
}

@Misc{JDT2021,
  author       = {{Joblib Development Team}},
  howpublished = {Online (URL: https://joblib.readthedocs.io/en/latest/)},
  note         = {Accessed (18.05.2021)},
  title        = {{Joblib: running Python functions as pipeline jobs}},
  year         = {2021},
}

@Article{Wang2019a,
  author  = {Minjie Wang and Da Zheng and Zihao Ye and Quan Gan and Mufei Li and Xiang Song and Jinjing Zhou and Chao Ma and Lingfan Yu and Yu Gai and Tianjun Xiao and Tong He and George Karypis and Jinyang Li and Zheng Zhang},
  journal = {arXiv preprint arXiv:1909.01315},
  title   = {{Deep Graph Library: A Graph-Centric, Highly-Performant Package for Graph Neural Networks}},
  year    = {2019},
}

@InCollection{Paszke2019,
  author    = {Paszke, Adam and Gross, Sam and Massa, Francisco and Lerer, Adam and Bradbury, James and Chanan, Gregory and Killeen, Trevor and Lin, Zeming and Gimelshein, Natalia and Antiga, Luca and Desmaison, Alban and Kopf, Andreas and Yang, Edward and DeVito, Zachary and Raison, Martin and Tejani, Alykhan and Chilamkurthy, Sasank and Steiner, Benoit and Fang, Lu and Bai, Junjie and Chintala, Soumith},
  booktitle = {Advances in Neural Information Processing Systems 32},
  publisher = {Curran Associates, Inc.},
  title     = {{PyTorch: An Imperative Style, High-Performance Deep Learning Library}},
  year      = {2019},
  editor    = {H. Wallach and H. Larochelle and A. Beygelzimer and F. d\textquotesingle Alch\'{e}-Buc and E. Fox and R. Garnett},
  pages     = {8024--8035},
  url       = {http://papers.neurips.cc/paper/9015-pytorch-an-imperative-style-high-performance-deep-learning-library.pdf},
}

@Article{Falcon2019,
  author  = {Falcon, WA, et al.},
  journal = {GitHub. Note: https://github.com/PyTorchLightning/pytorch-lightning},
  title   = {{PyTorch Lightning}},
  year    = {2019},
  volume  = {3},
}

@Misc{Biewald2020,
  author = {Biewald, Lukas},
  note   = {Software available from wandb.com},
  title  = {Experiment Tracking with Weights and Biases},
  year   = {2020},
  url    = {https://www.wandb.com/},
}

@InProceedings{Allix2016,
  author    = {Allix, Kevin and Bissyand{\'e}, Tegawend{\'e} F. and Klein, Jacques and Le Traon, Yves},
  booktitle = {Proceedings of the 13th International Conference on Mining Software Repositories},
  title     = {{AndroZoo: Collecting Millions of Android Apps for the Research Community}},
  year      = {2016},
  address   = {New York, NY, USA},
  pages     = {468--471},
  publisher = {ACM},
  series    = {MSR '16},
  acmid     = {2903508},
  doi       = {10.1145/2901739.2903508},
  groups    = {Datasets},
  isbn      = {978-1-4503-4186-8},
  keywords  = {APK, android applications, software repository},
  location  = {Austin, Texas},
  numpages  = {4},
  url       = {http://doi.acm.org/10.1145/2901739.2903508},
}

@InProceedings{Mahdavifar2020,
  author    = {S. {Mahdavifar} and A. F. {Abdul Kadir} and R. {Fatemi} and D. {Alhadidi} and A. A. {Ghorbani}},
  booktitle = {2020 IEEE Intl Conf on Dependable, Autonomic and Secure Computing, Intl Conf on Pervasive Intelligence and Computing, Intl Conf on Cloud and Big Data Computing, Intl Conf on Cyber Science and Technology Congress (DASC/PiCom/CBDCom/CyberSciTech)},
  title     = {{Dynamic Android Malware Category Classification using Semi-Supervised Deep Learning}},
  year      = {2020},
  pages     = {515-522},
  doi       = {10.1109/DASC-PICom-CBDCom-CyberSciTech49142.2020.00094},
  groups    = {Datasets},
}

@Article{Arp2014,
  author   = {Arp, Daniel and Spreitzenbarth, Michael and H{\"{u}}bner, Malte and Gascon, Hugo and Rieck, Konrad},
  title    = {{Drebin: Effective and Explainable Detection of Android Malware in Your Pocket}},
  doi      = {10.14722/ndss.2014.23247},
  number   = {August},
  abstract = {{\#}Drebin. They do lightweight static analysis. Pretty fast (10 secs/app), and they explain their detection results. Detection: 94{\%}. FP: 1{\%}. Bunch of features: hardware components, requested permissions, app components, filtered intents, restricted API calls (for which permission is required, but the app doesn't. maybe it has a root exploit), used permissions, suspicious API calls, network addresses.},
  file     = {:home/itadmin/Downloads/papers/2014-ndss.pdf:pdf},
  groups   = {Manifest, Datasets},
  isbn     = {1891562355},
  year     = {2014},
}

@Article{Ren2020,
  author   = {Zhongru Ren and Haomin Wu and Qian Ning and Iftikhar Hussain and Bingcai Chen},
  title    = {End-to-end malware detection for android IoT devices using deep learning},
  doi      = {https://doi.org/10.1016/j.adhoc.2020.102098},
  issn     = {1570-8705},
  pages    = {102098},
  url      = {http://www.sciencedirect.com/science/article/pii/S1570870519310984},
  volume   = {101},
  groups   = {Dex and Opcodes},
  journal  = {Ad Hoc Networks},
  keywords = {Android malware detection, IoT, End-to-end, Deep learning},
  year     = {2020},
}

@Article{Pektas2020,
  author  = {Pektas, Abdurrahman and Acarman, Tankut},
  title   = {Deep learning for effective Android malware detection using API call graph embeddings},
  doi     = {10.1007/s00500-019-03940-5},
  issn    = {1433-7479},
  number  = {2},
  pages   = {1027-1043},
  url     = {https://doi.org/10.1007/s00500-019-03940-5},
  volume  = {24},
  groups  = {ACG},
  journal = {Soft Computing},
  year    = {2020},
}

@Article{Du2017,
  author   = {Y. {Du} and J. {Wang} and Q. {Li}},
  title    = {An Android Malware Detection Approach Using Community Structures of Weighted Function Call Graphs},
  doi      = {10.1109/ACCESS.2017.2720160},
  issn     = {2169-3536},
  pages    = {17478-17486},
  volume   = {5},
  groups   = {FCG},
  journal  = {IEEE Access},
  keywords = {Android (operating system);graph theory;invasive software;learning (artificial intelligence);pattern classification;android malware detection approach;weighted function call graphs;code obfuscation;application repackaging technologies;structural information-based methods;detection accuracy;computation time;malware detection method;function call graph;malware families;community structure generation;GN algorithm;runtime performance;antivirus software;Girvan-Newman algorithm;machine learning classification;Malware;Androids;Humanoid robots;Feature extraction;Machine learning algorithms;Springs;Face;Malware;community structures;machine learning},
  year     = {2017},
}

@Article{Gao2019,
  author   = {T. {Gao} and W. {Peng} and D. {Sisodia} and T. K. {Saha} and F. {Li} and M. {Al Hasan}},
  title    = {Android Malware Detection via Graphlet Sampling},
  doi      = {10.1109/TMC.2018.2880731},
  issn     = {2161-9875},
  number   = {12},
  pages    = {2754-2767},
  volume   = {18},
  groups   = {FCG},
  journal  = {IEEE Transactions on Mobile Computing},
  keywords = {Android (operating system);data mining;feature extraction;graph theory;invasive software;mobile computing;smart phones;Android malware detection;mobile systems;Android apps;function call graphs;graphlet mining;app topological signature through graphlet sampling;wireless distributed systems;Android-based smartphones;Android-based tablets;Android app packages;Malware;Feature extraction;Semantics;Smart phones;Java;Markov processes;Android;graphlet sampling;mobile applications;mobile malware;smartphone},
  month    = {Dec},
  year     = {2019},
}

@InProceedings{Wu2019,
  author    = {Y. {Wu} and X. {Li} and D. {Zou} and W. {Yang} and X. {Zhang} and H. {Jin}},
  booktitle = {2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title     = {MalScan: Fast Market-Wide Mobile Malware Scanning by Social-Network Centrality Analysis},
  doi       = {10.1109/ASE.2019.00023},
  pages     = {139-150},
  groups    = {FCG},
  issn      = {1938-4300},
  keywords  = {Android (operating system);graph theory;invasive software;mobile computing;program diagnostics;social networking (online);MalScan;syntax-based features;transformation attacks;program analysis;lightweight graph-based approach;Android malware detection;static analysis;social-network-based centrality analysis;semantic features;graph semantics;market-wide malware scanning;Google-Play app market;zero-day malware including malware samples;mobile malware scanning;fault-tolerant representation;Lightweight feature, Android Malware, API Centrality, Market-wide},
  month     = {Nov},
  year      = {2019},
}

@Article{Li2020,
  author  = {Li, Jin and Zhang, Sai and Liu, Tao and Ning, Chenxi and Zhang, Zhuoxuan and Zhou, Wei},
  title   = {{Neural inductive matrix completion with graph convolutional networks for miRNA-disease association prediction}},
  doi     = {10.1093/bioinformatics/btz965},
  eprint  = {https://academic.oup.com/bioinformatics/article-pdf/36/8/2538/33116520/btz965.pdf},
  issn    = {1367-4803},
  number  = {8},
  pages   = {2538-2546},
  url     = {https://doi.org/10.1093/bioinformatics/btz965},
  volume  = {36},
  groups  = {GCN Applications},
  journal = {Bioinformatics},
  month   = {01},
  year    = {2020},
}

@InProceedings{Wang2019,
  author    = {Wang, Hongwei and Zhao, Miao and Xie, Xing and Li, Wenjie and Guo, Minyi},
  booktitle = {The World Wide Web Conference},
  title     = {Knowledge Graph Convolutional Networks for Recommender Systems},
  doi       = {10.1145/3308558.3313417},
  isbn      = {9781450366748},
  location  = {San Francisco, CA, USA},
  pages     = {3307â€“3313},
  publisher = {Association for Computing Machinery},
  series    = {WWW '19},
  url       = {https://doi.org/10.1145/3308558.3313417},
  address   = {New York, NY, USA},
  groups    = {GCN Applications},
  keywords  = {Knowledge graph, Recommender systems, Graph convolutional networks},
  numpages  = {7},
  year      = {2019},
}

@InProceedings{Ying2018,
  author    = {Ying, Rex and He, Ruining and Chen, Kaifeng and Eksombatchai, Pong and Hamilton, William L. and Leskovec, Jure},
  booktitle = {Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery \&; Data Mining},
  title     = {Graph Convolutional Neural Networks for Web-Scale Recommender Systems},
  doi       = {10.1145/3219819.3219890},
  isbn      = {9781450355520},
  location  = {London, United Kingdom},
  pages     = {974â€“983},
  publisher = {Association for Computing Machinery},
  series    = {KDD '18},
  url       = {https://doi.org/10.1145/3219819.3219890},
  address   = {New York, NY, USA},
  groups    = {GCN Applications},
  keywords  = {recommender systems, deep learning, graph convolutional networks, scalability},
  numpages  = {10},
  year      = {2018},
}

@Misc{AndroidDevelopers2021,
  author       = {{Android Developers}},
  howpublished = {Online (URL: https://developer.android.com/reference/packages)},
  note         = {Accessed: 18.05.2021},
  title        = {{Package Index}},
  year         = {2021},
}

@Misc{AndroidSource2021,
  author       = {{Android Source}},
  howpublished = {Online (URL: \url{https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/res/AndroidManifest.xml})},
  note         = {Accessed 19.05.2021},
  title        = {{AndroidManifest.xml}},
  year         = {2021},
}

@InProceedings{Kingma2015,
  author    = {Diederik P. Kingma and Jimmy Ba},
  booktitle = {3rd International Conference on Learning Representations, {ICLR} 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings},
  title     = {{Adam: {A} Method for Stochastic Optimization}},
  year      = {2015},
  editor    = {Yoshua Bengio and Yann LeCun},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/journals/corr/KingmaB14.bib},
  timestamp = {Thu, 25 Jul 2019 14:25:37 +0200},
  url       = {http://arxiv.org/abs/1412.6980},
}

@Comment{jabref-meta: databaseType:bibtex;}
